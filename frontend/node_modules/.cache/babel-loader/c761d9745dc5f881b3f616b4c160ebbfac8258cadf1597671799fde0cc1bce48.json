{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marco\\\\DocsImportantes\\\\CLT\\\\Bitrix24\\\\ProjetoDragAndDrop\\\\frontend\\\\src\\\\FlowEditor.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlowEditor = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [idCounter, setIdCounter] = useState(0);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const isValidConnection = useCallback(connection => {\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n\n    // Permite múltiplas conexões para perguntas e condições\n    if (sourceNode.type === 'question' || sourceNode.type === 'condition') {\n      return true;\n    }\n\n    // Verifica se o nó de origem já tem uma conexão\n    const hasExistingConnection = edges.some(edge => edge.source === connection.source);\n    return !hasExistingConnection;\n  }, [nodes, edges]);\n  const deleteNode = useCallback(nodeId => {\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n  }, [setNodes, setEdges]);\n  const updateNode = useCallback((nodeId, newData) => {\n    setNodes(prevNodes => prevNodes.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...newData\n      }\n    } : node));\n  }, [setNodes]);\n  const createNode = useCallback((type, initialData) => {\n    const nodeId = `${type}-${idCounter}`;\n    setIdCounter(prev => prev + 1);\n    const updateFunctions = {\n      message: {\n        updateContent: content => updateNode(nodeId, {\n          content\n        }),\n        onDelete: deleteNode\n      },\n      question: {\n        updateQuestion: question => updateNode(nodeId, {\n          question\n        }),\n        addOption: newOption => {\n          const currentOptions = initialData.options || [];\n          updateNode(nodeId, {\n            options: [...currentOptions, newOption]\n          });\n        },\n        updateOption: (index, value) => {\n          const newOptions = [...(initialData.options || [])];\n          newOptions[index] = value;\n          updateNode(nodeId, {\n            options: newOptions\n          });\n        },\n        onDelete: deleteNode\n      },\n      media: {\n        handleFileUpload: file => updateNode(nodeId, {\n          file\n        }),\n        updateUrl: url => updateNode(nodeId, {\n          url\n        }),\n        onDelete: deleteNode\n      },\n      condition: {\n        updateConditionType: conditionType => updateNode(nodeId, {\n          conditionType\n        }),\n        updateField: field => updateNode(nodeId, {\n          field\n        }),\n        updateComparison: comparison => updateNode(nodeId, {\n          comparison\n        }),\n        onDelete: deleteNode\n      },\n      interval: {\n        updateDuration: duration => updateNode(nodeId, {\n          duration\n        }),\n        onDelete: deleteNode\n      },\n      chatgpt: {\n        updateApiKey: apiKey => updateNode(nodeId, {\n          apiKey\n        }),\n        updateInstructions: instructions => updateNode(nodeId, {\n          instructions\n        }),\n        onDelete: deleteNode\n      },\n      api: {\n        updateMethod: method => updateNode(nodeId, {\n          method\n        }),\n        updateUrl: url => updateNode(nodeId, {\n          url\n        }),\n        updateHeaders: headers => updateNode(nodeId, {\n          headers\n        }),\n        updateBody: body => updateNode(nodeId, {\n          body\n        }),\n        onDelete: deleteNode\n      },\n      updateCRM: {\n        updateEntity: entity => updateNode(nodeId, {\n          entity\n        }),\n        updateField: field => updateNode(nodeId, {\n          field\n        }),\n        updateValue: value => updateNode(nodeId, {\n          value\n        }),\n        onDelete: deleteNode\n      },\n      createRecord: {\n        updateEntity: entity => updateNode(nodeId, {\n          entity\n        }),\n        updateStage: stage => updateNode(nodeId, {\n          stage\n        }),\n        updateFields: fields => updateNode(nodeId, {\n          fields\n        }),\n        onDelete: deleteNode\n      }\n    };\n    return {\n      id: nodeId,\n      type,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      draggable: true,\n      data: {\n        ...initialData,\n        ...updateFunctions[type]\n      }\n    };\n  }, [idCounter, updateNode, deleteNode]);\n  const addNode = useCallback(type => {\n    const nodeConfig = {\n      message: {\n        content: ''\n      },\n      question: {\n        question: '',\n        options: ['Sim', 'Não']\n      },\n      media: {\n        url: '',\n        file: null\n      },\n      condition: {\n        conditionType: 'cadastro',\n        field: '',\n        comparison: ''\n      },\n      interval: {\n        duration: 300\n      },\n      chatgpt: {\n        apiKey: '',\n        instructions: ''\n      },\n      api: {\n        method: 'GET',\n        url: '',\n        headers: '',\n        body: ''\n      },\n      updateCRM: {\n        entity: 'lead',\n        field: '',\n        value: ''\n      },\n      createRecord: {\n        entity: 'lead',\n        stage: 'new',\n        fields: '{}'\n      }\n    };\n    setNodes(prevNodes => [...prevNodes, createNode(type, nodeConfig[type])]);\n  }, [createNode, setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '250px',\n        padding: '20px',\n        backgroundColor: '#f8f9fa',\n        borderRight: '1px solid #ddd',\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ferramentas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('message'),\n          children: \"Nova Mensagem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('question'),\n          children: \"Nova Pergunta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('media'),\n          children: \"Nova M\\xEDdia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('condition'),\n          children: \"Nova Condi\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('interval'),\n          children: \"Novo Intervalo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('chatgpt'),\n          children: \"Chat GPT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('api'),\n          children: \"API Externa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('updateCRM'),\n          children: \"Atualizar CRM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNode('createRecord'),\n          children: \"Criar Cadastro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: flowContainerStyles,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        isValidConnection: isValidConnection,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n_s(FlowEditor, \"whyRLpu3p1tZEk6faPA/ydCtt3M=\", true);\n_c = FlowEditor;\nexport default FlowEditor;\nvar _c;\n$RefreshReg$(_c, \"FlowEditor\");","map":{"version":3,"names":["FlowEditor","_s","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","idCounter","setIdCounter","useState","onConnect","useCallback","params","eds","addEdge","isValidConnection","connection","sourceNode","find","node","id","source","targetNode","target","type","hasExistingConnection","some","edge","deleteNode","nodeId","nds","filter","updateNode","newData","prevNodes","map","data","createNode","initialData","prev","updateFunctions","message","updateContent","content","onDelete","question","updateQuestion","addOption","newOption","currentOptions","options","updateOption","index","value","newOptions","media","handleFileUpload","file","updateUrl","url","condition","updateConditionType","conditionType","updateField","field","updateComparison","comparison","interval","updateDuration","duration","chatgpt","updateApiKey","apiKey","updateInstructions","instructions","api","updateMethod","method","updateHeaders","headers","updateBody","body","updateCRM","updateEntity","entity","updateValue","createRecord","updateStage","stage","updateFields","fields","position","x","Math","random","y","draggable","addNode","nodeConfig","_jsxDEV","style","height","display","children","width","padding","backgroundColor","borderRight","overflowY","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","gap","onClick","flowContainerStyles","ReactFlow","nodeTypes","fitView","MiniMap","Controls","Background","_c","$RefreshReg$"],"sources":["C:/Users/marco/DocsImportantes/CLT/Bitrix24/ProjetoDragAndDrop/frontend/src/FlowEditor.js"],"sourcesContent":["const FlowEditor = () => {\r\n    const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n    const [idCounter, setIdCounter] = useState(0);\r\n\r\n    const onConnect = useCallback(\r\n        (params) => setEdges((eds) => addEdge(params, eds)),\r\n        [setEdges]\r\n    );\r\n\r\n    const isValidConnection = useCallback((connection) => {\r\n        const sourceNode = nodes.find((node) => node.id === connection.source);\r\n        const targetNode = nodes.find((node) => node.id === connection.target);\r\n\r\n        // Permite múltiplas conexões para perguntas e condições\r\n        if (sourceNode.type === 'question' || sourceNode.type === 'condition') {\r\n            return true;\r\n        }\r\n\r\n        // Verifica se o nó de origem já tem uma conexão\r\n        const hasExistingConnection = edges.some(\r\n            (edge) => edge.source === connection.source\r\n        );\r\n\r\n        return !hasExistingConnection;\r\n    }, [nodes, edges]);\r\n\r\n    const deleteNode = useCallback((nodeId) => {\r\n        setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n        setEdges((eds) => eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId));\r\n    }, [setNodes, setEdges]);\r\n\r\n    const updateNode = useCallback((nodeId, newData) => {\r\n        setNodes((prevNodes) =>\r\n            prevNodes.map((node) =>\r\n                node.id === nodeId ? { ...node, data: { ...node.data, ...newData } } : node\r\n            )\r\n        );\r\n    }, [setNodes]);\r\n\r\n    const createNode = useCallback((type, initialData) => {\r\n        const nodeId = `${type}-${idCounter}`;\r\n        setIdCounter((prev) => prev + 1);\r\n\r\n        const updateFunctions = {\r\n            message: {\r\n                updateContent: (content) => updateNode(nodeId, { content }),\r\n                onDelete: deleteNode,\r\n            },\r\n            question: {\r\n                updateQuestion: (question) => updateNode(nodeId, { question }),\r\n                addOption: (newOption) => {\r\n                    const currentOptions = initialData.options || [];\r\n                    updateNode(nodeId, { options: [...currentOptions, newOption] });\r\n                },\r\n                updateOption: (index, value) => {\r\n                    const newOptions = [...(initialData.options || [])];\r\n                    newOptions[index] = value;\r\n                    updateNode(nodeId, { options: newOptions });\r\n                },\r\n                onDelete: deleteNode,\r\n            },\r\n            media: {\r\n                handleFileUpload: (file) => updateNode(nodeId, { file }),\r\n                updateUrl: (url) => updateNode(nodeId, { url }),\r\n                onDelete: deleteNode,\r\n            },\r\n            condition: {\r\n                updateConditionType: (conditionType) => updateNode(nodeId, { conditionType }),\r\n                updateField: (field) => updateNode(nodeId, { field }),\r\n                updateComparison: (comparison) => updateNode(nodeId, { comparison }),\r\n                onDelete: deleteNode,\r\n            },\r\n            interval: {\r\n                updateDuration: (duration) => updateNode(nodeId, { duration }),\r\n                onDelete: deleteNode,\r\n            },\r\n            chatgpt: {\r\n                updateApiKey: (apiKey) => updateNode(nodeId, { apiKey }),\r\n                updateInstructions: (instructions) => updateNode(nodeId, { instructions }),\r\n                onDelete: deleteNode,\r\n            },\r\n            api: {\r\n                updateMethod: (method) => updateNode(nodeId, { method }),\r\n                updateUrl: (url) => updateNode(nodeId, { url }),\r\n                updateHeaders: (headers) => updateNode(nodeId, { headers }),\r\n                updateBody: (body) => updateNode(nodeId, { body }),\r\n                onDelete: deleteNode,\r\n            },\r\n            updateCRM: {\r\n                updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n                updateField: (field) => updateNode(nodeId, { field }),\r\n                updateValue: (value) => updateNode(nodeId, { value }),\r\n                onDelete: deleteNode,\r\n            },\r\n            createRecord: {\r\n                updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n                updateStage: (stage) => updateNode(nodeId, { stage }),\r\n                updateFields: (fields) => updateNode(nodeId, { fields }),\r\n                onDelete: deleteNode,\r\n            },\r\n        };\r\n\r\n        return {\r\n            id: nodeId,\r\n            type,\r\n            position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n            draggable: true,\r\n            data: {\r\n                ...initialData,\r\n                ...updateFunctions[type],\r\n            },\r\n        };\r\n    }, [idCounter, updateNode, deleteNode]);\r\n\r\n    const addNode = useCallback((type) => {\r\n        const nodeConfig = {\r\n            message: { content: '' },\r\n            question: { question: '', options: ['Sim', 'Não'] },\r\n            media: { url: '', file: null },\r\n            condition: { conditionType: 'cadastro', field: '', comparison: '' },\r\n            interval: { duration: 300 },\r\n            chatgpt: { apiKey: '', instructions: '' },\r\n            api: { method: 'GET', url: '', headers: '', body: '' },\r\n            updateCRM: { entity: 'lead', field: '', value: '' },\r\n            createRecord: { entity: 'lead', stage: 'new', fields: '{}' },\r\n        };\r\n        setNodes((prevNodes) => [...prevNodes, createNode(type, nodeConfig[type])]);\r\n    }, [createNode, setNodes]);\r\n\r\n    return (\r\n        <div style={{ height: '100vh', display: 'flex' }}>\r\n            <div style={{\r\n                width: '250px',\r\n                padding: '20px',\r\n                backgroundColor: '#f8f9fa',\r\n                borderRight: '1px solid #ddd',\r\n                overflowY: 'auto'\r\n            }}>\r\n                <h3>Ferramentas</h3>\r\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n                    <button onClick={() => addNode('message')}>Nova Mensagem</button>\r\n                    <button onClick={() => addNode('question')}>Nova Pergunta</button>\r\n                    <button onClick={() => addNode('media')}>Nova Mídia</button>\r\n                    <button onClick={() => addNode('condition')}>Nova Condição</button>\r\n                    <button onClick={() => addNode('interval')}>Novo Intervalo</button>\r\n                    <button onClick={() => addNode('chatgpt')}>Chat GPT</button>\r\n                    <button onClick={() => addNode('api')}>API Externa</button>\r\n                    <button onClick={() => addNode('updateCRM')}>Atualizar CRM</button>\r\n                    <button onClick={() => addNode('createRecord')}>Criar Cadastro</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Container para o React Flow */}\r\n            <div style={flowContainerStyles}>\r\n                <ReactFlow\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    onNodesChange={onNodesChange}\r\n                    onEdgesChange={onEdgesChange}\r\n                    onConnect={onConnect}\r\n                    isValidConnection={isValidConnection}\r\n                    nodeTypes={nodeTypes}\r\n                    fitView\r\n                >\r\n                    <MiniMap />\r\n                    <Controls />\r\n                    <Background />\r\n                </ReactFlow>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FlowEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}