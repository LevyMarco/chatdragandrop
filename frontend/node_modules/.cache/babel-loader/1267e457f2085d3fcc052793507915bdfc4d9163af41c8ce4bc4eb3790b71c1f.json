{"ast":null,"code":"var _s2 = $RefreshSig$();\nconst FlowEditor = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [nodes, setNodes, onNodesChange] = useNodesState();\n  const [edges, setEdges, onEdgesChange] = useEdgesState();\n  const [idCounter, setIdCounter] = useState(0);\n  const updateNode = useCallback((nodeId, newData) => {\n    setNodes(prevNodes => {\n      if (!Array.isArray(prevNodes)) {\n        console.error(\"Previous nodes state is not an array:\", prevNodes);\n        return []; // Retorna um array vazio como fallback\n      }\n      return prevNodes.map(node => node.id === nodeId ? {\n        ...node,\n        data: {\n          ...node.data,\n          ...newData\n        }\n      } : node);\n    });\n  }, [setNodes]);\n  const createNode = _s(useCallback(_s((type, initialData) => {\n    _s();\n    const nodeId = `${type}-${idCounter}`;\n    setIdCounter(idCounter + 1);\n    const nodeData = {\n      ...initialData,\n      message: {\n        updateContent: useCallback(content => updateNode(nodeId, {\n          content\n        }), [nodeId, updateNode])\n      },\n      question: {\n        updateQuestion: useCallback(question => updateNode(nodeId, {\n          question\n        }), [nodeId, updateNode]),\n        addOption: useCallback(() => {\n          const currentOptions = nodeData.question.options || [];\n          const newOption = `Opção ${currentOptions.length + 1}`;\n          updateNode(nodeId, {\n            options: [...currentOptions, newOption]\n          });\n        }, [nodeId, updateNode]),\n        updateOption: useCallback((index, value) => {\n          const newOptions = [...(nodeData.question.options || [])];\n          newOptions[index] = value;\n          updateNode(nodeId, {\n            options: newOptions\n          });\n        }, [nodeId, updateNode])\n      },\n      media: {\n        handleFileUpload: useCallback(file => updateNode(nodeId, {\n          file\n        }), [nodeId, updateNode]),\n        updateUrl: useCallback(url => updateNode(nodeId, {\n          url\n        }), [nodeId, updateNode])\n      },\n      condition: {\n        updateConditionType: useCallback(conditionType => updateNode(nodeId, {\n          conditionType\n        }), [nodeId, updateNode]),\n        updateField: useCallback(field => updateNode(nodeId, {\n          field\n        }), [nodeId, updateNode]),\n        updateComparison: useCallback(comparison => updateNode(nodeId, {\n          comparison\n        }), [nodeId, updateNode])\n      },\n      interval: {\n        updateDuration: useCallback(duration => updateNode(nodeId, {\n          duration\n        }), [nodeId, updateNode])\n      },\n      chatgpt: {\n        updateApiKey: useCallback(apiKey => updateNode(nodeId, {\n          apiKey\n        }), [nodeId, updateNode]),\n        updateInstructions: useCallback(instructions => updateNode(nodeId, {\n          instructions\n        }), [nodeId, updateNode])\n      },\n      api: {\n        updateMethod: useCallback(method => updateNode(nodeId, {\n          method\n        }), [nodeId, updateNode]),\n        updateUrl: useCallback(url => updateNode(nodeId, {\n          url\n        }), [nodeId, updateNode]),\n        updateHeaders: useCallback(headers => updateNode(nodeId, {\n          headers\n        }), [nodeId, updateNode]),\n        updateBody: useCallback(body => updateNode(nodeId, {\n          body\n        }), [nodeId, updateNode])\n      },\n      updateCRM: {\n        updateEntity: useCallback(entity => updateNode(nodeId, {\n          entity\n        }), [nodeId, updateNode]),\n        updateField: useCallback(field => updateNode(nodeId, {\n          field\n        }), [nodeId, updateNode]),\n        updateValue: useCallback(value => updateNode(nodeId, {\n          value\n        }), [nodeId, updateNode])\n      },\n      createRecord: {\n        updateEntity: useCallback(entity => updateNode(nodeId, {\n          entity\n        }), [nodeId, updateNode]),\n        updateStage: useCallback(stage => updateNode(nodeId, {\n          stage\n        }), [nodeId, updateNode]),\n        updateFields: useCallback(fields => updateNode(nodeId, {\n          fields\n        }), [nodeId, updateNode])\n      }\n    };\n    return {\n      id: nodeId,\n      type,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      draggable: true,\n      data: nodeData[type]\n    };\n  }, \"KQ1i1Me9gLsOERH/sP9SPPRc+BA=\"), [idCounter, updateNode]), \"KQ1i1Me9gLsOERH/sP9SPPRc+BA=\");\n  // ... restante do seu código\n};\n_s2(FlowEditor, \"tHV2or7JMucS/BAt47TolEGbVS4=\", true);\n_c = FlowEditor;\nvar _c;\n$RefreshReg$(_c, \"FlowEditor\");","map":{"version":3,"names":["FlowEditor","_s2","_s","$RefreshSig$","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","idCounter","setIdCounter","useState","updateNode","useCallback","nodeId","newData","prevNodes","Array","isArray","console","error","map","node","id","data","createNode","type","initialData","nodeData","message","updateContent","content","question","updateQuestion","addOption","currentOptions","options","newOption","length","updateOption","index","value","newOptions","media","handleFileUpload","file","updateUrl","url","condition","updateConditionType","conditionType","updateField","field","updateComparison","comparison","interval","updateDuration","duration","chatgpt","updateApiKey","apiKey","updateInstructions","instructions","api","updateMethod","method","updateHeaders","headers","updateBody","body","updateCRM","updateEntity","entity","updateValue","createRecord","updateStage","stage","updateFields","fields","position","x","Math","random","y","draggable","_c","$RefreshReg$"],"sources":["C:/Users/marco/DocsImportantes/CLT/Bitrix24/ProjetoDragAndDrop/frontend/src/FlowEditor.js"],"sourcesContent":["const FlowEditor = () => {\r\n    const [nodes, setNodes, onNodesChange] = useNodesState();\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState();\r\n    const [idCounter, setIdCounter] = useState(0);\r\n\r\n    const updateNode = useCallback((nodeId, newData) => {\r\n        setNodes(prevNodes => {\r\n            if (!Array.isArray(prevNodes)) {\r\n                console.error(\"Previous nodes state is not an array:\", prevNodes);\r\n                return []; // Retorna um array vazio como fallback\r\n            }\r\n            return prevNodes.map(node =>\r\n                node.id === nodeId ? { ...node, data: { ...node.data, ...newData } } : node\r\n            );\r\n        });\r\n    }, [setNodes]);\r\n\r\n    const createNode = useCallback((type, initialData) => {\r\n        const nodeId = `${type}-${idCounter}`;\r\n        setIdCounter(idCounter + 1);\r\n\r\n        const nodeData = {\r\n            ...initialData,\r\n            message: {\r\n                updateContent: useCallback((content) => updateNode(nodeId, { content }), [nodeId, updateNode])\r\n            },\r\n            question: {\r\n                updateQuestion: useCallback((question) => updateNode(nodeId, { question }), [nodeId, updateNode]),\r\n                addOption: useCallback(() => {\r\n                    const currentOptions = nodeData.question.options || [];\r\n                    const newOption = `Opção ${currentOptions.length + 1}`;\r\n                    updateNode(nodeId, { options: [...currentOptions, newOption] });\r\n                }, [nodeId, updateNode]),\r\n                updateOption: useCallback((index, value) => {\r\n                    const newOptions = [...(nodeData.question.options || [])];\r\n                    newOptions[index] = value;\r\n                    updateNode(nodeId, { options: newOptions });\r\n                }, [nodeId, updateNode])\r\n            },\r\n            media: {\r\n                handleFileUpload: useCallback((file) => updateNode(nodeId, { file }), [nodeId, updateNode]),\r\n                updateUrl: useCallback((url) => updateNode(nodeId, { url }), [nodeId, updateNode])\r\n            },\r\n            condition: {\r\n                updateConditionType: useCallback((conditionType) => updateNode(nodeId, { conditionType }), [nodeId, updateNode]),\r\n                updateField: useCallback((field) => updateNode(nodeId, { field }), [nodeId, updateNode]),\r\n                updateComparison: useCallback((comparison) => updateNode(nodeId, { comparison }), [nodeId, updateNode])\r\n            },\r\n            interval: {\r\n                updateDuration: useCallback((duration) => updateNode(nodeId, { duration }), [nodeId, updateNode])\r\n            },\r\n            chatgpt: {\r\n                updateApiKey: useCallback((apiKey) => updateNode(nodeId, { apiKey }), [nodeId, updateNode]),\r\n                updateInstructions: useCallback((instructions) => updateNode(nodeId, { instructions }), [nodeId, updateNode])\r\n            },\r\n            api: {\r\n                updateMethod: useCallback((method) => updateNode(nodeId, { method }), [nodeId, updateNode]),\r\n                updateUrl: useCallback((url) => updateNode(nodeId, { url }), [nodeId, updateNode]),\r\n                updateHeaders: useCallback((headers) => updateNode(nodeId, { headers }), [nodeId, updateNode]),\r\n                updateBody: useCallback((body) => updateNode(nodeId, { body }), [nodeId, updateNode])\r\n            },\r\n            updateCRM: {\r\n                updateEntity: useCallback((entity) => updateNode(nodeId, { entity }), [nodeId, updateNode]),\r\n                updateField: useCallback((field) => updateNode(nodeId, { field }), [nodeId, updateNode]),\r\n                updateValue: useCallback((value) => updateNode(nodeId, { value }), [nodeId, updateNode])\r\n            },\r\n            createRecord: {\r\n                updateEntity: useCallback((entity) => updateNode(nodeId, { entity }), [nodeId, updateNode]),\r\n                updateStage: useCallback((stage) => updateNode(nodeId, { stage }), [nodeId, updateNode]),\r\n                updateFields: useCallback((fields) => updateNode(nodeId, { fields }), [nodeId, updateNode])\r\n            }\r\n        };\r\n\r\n        return {\r\n            id: nodeId,\r\n            type,\r\n            position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n            draggable: true,\r\n            data: nodeData[type]\r\n        };\r\n    }, [idCounter, updateNode]);\r\n    // ... restante do seu código\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}