{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marco\\\\DocsImportantes\\\\CLT\\\\Bitrix24\\\\ProjetoDragAndDrop\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport ReactFlow, { addEdge, MiniMap, Controls, Handle } from \"react-flow-renderer\";\nimport { saveFlow } from \"./services\"; // Função para enviar o fluxo para o backend\nimport FlowEditor from \"./FlowEditor\";\nimport ChatComponent from \"./ChatComponent\";\n\n// Definindo os tipos de nós\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  message: ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 10,\n      backgroundColor: \"#f9f9f9\",\n      borderRadius: 5\n    },\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this)\n};\nfunction App() {\n  _s();\n  const [elements, setElements] = useState([]);\n\n  // Função para adicionar um nó de tipo mensagem\n  const addNode = () => {\n    const newNode = {\n      id: `node-${elements.length + 1}`,\n      type: \"message\",\n      // Tipo de nó que vai renderizar uma mensagem\n      data: {\n        label: `Mensagem ${elements.length + 1}`\n      },\n      // Adicionando label\n      position: {\n        x: 100,\n        y: 100 + elements.length * 150\n      },\n      // Ajuste a posição\n      style: {\n        border: \"1px solid #ddd\",\n        padding: \"10px\"\n      }\n    };\n\n    // Atualizando o estado com o novo nó\n    setElements(els => [...els, newNode]);\n  };\n\n  // Função para salvar o fluxo no backend\n  const saveChatFlow = async () => {\n    const flowData = {\n      elements\n    };\n    await saveFlow(flowData); // Salva o fluxo no backend\n    alert(\"Fluxo salvo com sucesso!\");\n  };\n  const onConnect = params => setElements(els => addEdge(params, els));\n\n  // Adicionando um nó inicial quando o componente for montado\n  useEffect(() => {\n    const initialElements = [{\n      id: '1',\n      type: 'message',\n      data: {\n        label: 'Escolha o setor'\n      },\n      position: {\n        x: 100,\n        y: 100\n      }\n    }, {\n      id: '2',\n      type: 'message',\n      data: {\n        label: 'Mensagem de resposta'\n      },\n      position: {\n        x: 300,\n        y: 100\n      }\n    }, {\n      id: 'e1-2',\n      source: '1',\n      target: '2',\n      animated: true\n    } // Conectando os dois nós\n    ];\n    setElements(initialElements);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 20,\n        left: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"Adicionar Mensagem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveChatFlow,\n        children: \"Salvar Fluxo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlowEditor, {\n      elements: elements,\n      setElements: setElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rnsLSlgiu0CUupiHKeHSUyZhdlU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","addEdge","MiniMap","Controls","Handle","saveFlow","FlowEditor","ChatComponent","jsxDEV","_jsxDEV","nodeTypes","message","data","style","padding","backgroundColor","borderRadius","children","label","fileName","_jsxFileName","lineNumber","columnNumber","App","_s","elements","setElements","addNode","newNode","id","length","type","position","x","y","border","els","saveChatFlow","flowData","alert","onConnect","params","initialElements","source","target","animated","height","top","left","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marco/DocsImportantes/CLT/Bitrix24/ProjetoDragAndDrop/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactFlow, { addEdge, MiniMap, Controls, Handle } from \"react-flow-renderer\";\r\nimport { saveFlow } from \"./services\";  // Função para enviar o fluxo para o backend\r\nimport FlowEditor from \"./FlowEditor\";\r\nimport ChatComponent from \"./ChatComponent\";\r\n\r\n// Definindo os tipos de nós\r\nconst nodeTypes = {\r\n  message: ({ data }) => (\r\n    <div style={{ padding: 10, backgroundColor: \"#f9f9f9\", borderRadius: 5 }}>\r\n      <strong>{data.label}</strong>\r\n    </div>\r\n  ),\r\n};\r\n\r\nfunction App() {\r\n  const [elements, setElements] = useState([]);\r\n  \r\n  // Função para adicionar um nó de tipo mensagem\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: `node-${elements.length + 1}`,\r\n      type: \"message\", // Tipo de nó que vai renderizar uma mensagem\r\n      data: { label: `Mensagem ${elements.length + 1}` },  // Adicionando label\r\n      position: { x: 100, y: 100 + elements.length * 150 },  // Ajuste a posição\r\n      style: { border: \"1px solid #ddd\", padding: \"10px\" },\r\n    };\r\n\r\n    // Atualizando o estado com o novo nó\r\n    setElements((els) => [...els, newNode]);\r\n  };\r\n\r\n  // Função para salvar o fluxo no backend\r\n  const saveChatFlow = async () => {\r\n    const flowData = { elements };\r\n    await saveFlow(flowData);  // Salva o fluxo no backend\r\n    alert(\"Fluxo salvo com sucesso!\");\r\n  };\r\n\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n\r\n  // Adicionando um nó inicial quando o componente for montado\r\n  useEffect(() => {\r\n    const initialElements = [\r\n      { id: '1', type: 'message', data: { label: 'Escolha o setor' }, position: { x: 100, y: 100 } },\r\n      { id: '2', type: 'message', data: { label: 'Mensagem de resposta' }, position: { x: 300, y: 100 } },\r\n      { id: 'e1-2', source: '1', target: '2', animated: true },  // Conectando os dois nós\r\n    ];\r\n    setElements(initialElements);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\" }}>\r\n      <div style={{ position: \"absolute\", top: 20, left: 20 }}>\r\n        <button onClick={addNode}>Adicionar Mensagem</button>\r\n        <button onClick={saveChatFlow}>Salvar Fluxo</button>\r\n      </div>\r\n      <FlowEditor elements={elements} setElements={setElements} />\r\n      <ChatComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,IAAIC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,qBAAqB;AACnF,SAASC,QAAQ,QAAQ,YAAY,CAAC,CAAE;AACxC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG;EAChBC,OAAO,EAAEA,CAAC;IAAEC;EAAK,CAAC,kBAChBH,OAAA;IAAKI,KAAK,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,eAAe,EAAE,SAAS;MAAEC,YAAY,EAAE;IAAE,CAAE;IAAAC,QAAA,eACvER,OAAA;MAAAQ,QAAA,EAASL,IAAI,CAACM;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B;AAET,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM6B,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAE,QAAQJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;MACjCC,IAAI,EAAE,SAAS;MAAE;MACjBnB,IAAI,EAAE;QAAEM,KAAK,EAAE,YAAYO,QAAQ,CAACK,MAAM,GAAG,CAAC;MAAG,CAAC;MAAG;MACrDE,QAAQ,EAAE;QAAEC,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE,GAAG,GAAGT,QAAQ,CAACK,MAAM,GAAG;MAAI,CAAC;MAAG;MACvDjB,KAAK,EAAE;QAAEsB,MAAM,EAAE,gBAAgB;QAAErB,OAAO,EAAE;MAAO;IACrD,CAAC;;IAED;IACAY,WAAW,CAAEU,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAER,OAAO,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG;MAAEb;IAAS,CAAC;IAC7B,MAAMpB,QAAQ,CAACiC,QAAQ,CAAC,CAAC,CAAE;IAC3BC,KAAK,CAAC,0BAA0B,CAAC;EACnC,CAAC;EAED,MAAMC,SAAS,GAAIC,MAAM,IAAKf,WAAW,CAAEU,GAAG,IAAKnC,OAAO,CAACwC,MAAM,EAAEL,GAAG,CAAC,CAAC;;EAExE;EACArC,SAAS,CAAC,MAAM;IACd,MAAM2C,eAAe,GAAG,CACtB;MAAEb,EAAE,EAAE,GAAG;MAAEE,IAAI,EAAE,SAAS;MAAEnB,IAAI,EAAE;QAAEM,KAAK,EAAE;MAAkB,CAAC;MAAEc,QAAQ,EAAE;QAAEC,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE;MAAI;IAAE,CAAC,EAC9F;MAAEL,EAAE,EAAE,GAAG;MAAEE,IAAI,EAAE,SAAS;MAAEnB,IAAI,EAAE;QAAEM,KAAK,EAAE;MAAuB,CAAC;MAAEc,QAAQ,EAAE;QAAEC,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE;MAAI;IAAE,CAAC,EACnG;MAAEL,EAAE,EAAE,MAAM;MAAEc,MAAM,EAAE,GAAG;MAAEC,MAAM,EAAE,GAAG;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAG;IAAA,CAC5D;IACDnB,WAAW,CAACgB,eAAe,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjC,OAAA;IAAKI,KAAK,EAAE;MAAEiC,MAAM,EAAE;IAAQ,CAAE;IAAA7B,QAAA,gBAC9BR,OAAA;MAAKI,KAAK,EAAE;QAAEmB,QAAQ,EAAE,UAAU;QAAEe,GAAG,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAE;MAAA/B,QAAA,gBACtDR,OAAA;QAAQwC,OAAO,EAAEtB,OAAQ;QAAAV,QAAA,EAAC;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDb,OAAA;QAAQwC,OAAO,EAAEZ,YAAa;QAAApB,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACNb,OAAA,CAACH,UAAU;MAACmB,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA;IAAY;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5Db,OAAA,CAACF,aAAa;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAACE,EAAA,CA9CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}