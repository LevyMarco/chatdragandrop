{"ast":null,"code":"const createNode = useCallback((type, initialData) => {\n  const nodeId = `${type}-${idCounter}`;\n  setIdCounter(prev => prev + 1);\n  const updateFunctions = {\n    message: {\n      updateContent: content => updateNode(nodeId, {\n        content\n      }),\n      onDelete: deleteNode\n    },\n    question: {\n      updateQuestion: question => updateNode(nodeId, {\n        question\n      }),\n      addOption: () => {\n        const currentOptions = initialData.options || [];\n        const newOption = `Opção ${currentOptions.length + 1}`;\n        updateNode(nodeId, {\n          options: [...currentOptions, newOption]\n        });\n      },\n      updateOption: (index, value) => {\n        const newOptions = [...(initialData.options || [])];\n        newOptions[index] = value;\n        updateNode(nodeId, {\n          options: newOptions\n        });\n      },\n      onDelete: deleteNode\n    },\n    media: {\n      handleFileUpload: file => updateNode(nodeId, {\n        file\n      }),\n      updateUrl: url => updateNode(nodeId, {\n        url\n      }),\n      onDelete: deleteNode\n    },\n    condition: {\n      updateConditionType: conditionType => updateNode(nodeId, {\n        conditionType\n      }),\n      updateField: field => updateNode(nodeId, {\n        field\n      }),\n      updateComparison: comparison => updateNode(nodeId, {\n        comparison\n      }),\n      onDelete: deleteNode\n    },\n    interval: {\n      updateDuration: duration => updateNode(nodeId, {\n        duration\n      }),\n      onDelete: deleteNode\n    },\n    chatgpt: {\n      updateApiKey: apiKey => updateNode(nodeId, {\n        apiKey\n      }),\n      updateInstructions: instructions => updateNode(nodeId, {\n        instructions\n      }),\n      onDelete: deleteNode\n    },\n    api: {\n      updateMethod: method => updateNode(nodeId, {\n        method\n      }),\n      updateUrl: url => updateNode(nodeId, {\n        url\n      }),\n      updateHeaders: headers => updateNode(nodeId, {\n        headers\n      }),\n      updateBody: body => updateNode(nodeId, {\n        body\n      }),\n      onDelete: deleteNode\n    },\n    updateCRM: {\n      updateEntity: entity => updateNode(nodeId, {\n        entity\n      }),\n      updateField: field => updateNode(nodeId, {\n        field\n      }),\n      updateValue: value => updateNode(nodeId, {\n        value\n      }),\n      onDelete: deleteNode\n    },\n    createRecord: {\n      updateEntity: entity => updateNode(nodeId, {\n        entity\n      }),\n      updateStage: stage => updateNode(nodeId, {\n        stage\n      }),\n      updateFields: fields => updateNode(nodeId, {\n        fields\n      }),\n      onDelete: deleteNode\n    }\n  };\n  return {\n    id: nodeId,\n    type,\n    position: {\n      x: Math.random() * 400,\n      y: Math.random() * 400\n    },\n    draggable: true,\n    data: {\n      ...initialData,\n      ...updateFunctions[type]\n    }\n  };\n}, [idCounter, updateNode, deleteNode]);","map":{"version":3,"names":["createNode","useCallback","type","initialData","nodeId","idCounter","setIdCounter","prev","updateFunctions","message","updateContent","content","updateNode","onDelete","deleteNode","question","updateQuestion","addOption","currentOptions","options","newOption","length","updateOption","index","value","newOptions","media","handleFileUpload","file","updateUrl","url","condition","updateConditionType","conditionType","updateField","field","updateComparison","comparison","interval","updateDuration","duration","chatgpt","updateApiKey","apiKey","updateInstructions","instructions","api","updateMethod","method","updateHeaders","headers","updateBody","body","updateCRM","updateEntity","entity","updateValue","createRecord","updateStage","stage","updateFields","fields","id","position","x","Math","random","y","draggable","data"],"sources":["C:/Users/marco/DocsImportantes/CLT/Bitrix24/ProjetoDragAndDrop/frontend/src/FlowEditor.js"],"sourcesContent":["const createNode = useCallback((type, initialData) => {\r\n    const nodeId = `${type}-${idCounter}`;\r\n    setIdCounter((prev) => prev + 1);\r\n\r\n    const updateFunctions = {\r\n        message: {\r\n            updateContent: (content) => updateNode(nodeId, { content }),\r\n            onDelete: deleteNode,\r\n        },\r\n        question: {\r\n            updateQuestion: (question) => updateNode(nodeId, { question }),\r\n            addOption: () => {\r\n                const currentOptions = initialData.options || [];\r\n                const newOption = `Opção ${currentOptions.length + 1}`;\r\n                updateNode(nodeId, { options: [...currentOptions, newOption] });\r\n            },\r\n            updateOption: (index, value) => {\r\n                const newOptions = [...(initialData.options || [])];\r\n                newOptions[index] = value;\r\n                updateNode(nodeId, { options: newOptions });\r\n            },\r\n            onDelete: deleteNode,\r\n        },\r\n        media: {\r\n            handleFileUpload: (file) => updateNode(nodeId, { file }),\r\n            updateUrl: (url) => updateNode(nodeId, { url }),\r\n            onDelete: deleteNode,\r\n        },\r\n        condition: {\r\n            updateConditionType: (conditionType) => updateNode(nodeId, { conditionType }),\r\n            updateField: (field) => updateNode(nodeId, { field }),\r\n            updateComparison: (comparison) => updateNode(nodeId, { comparison }),\r\n            onDelete: deleteNode,\r\n        },\r\n        interval: {\r\n            updateDuration: (duration) => updateNode(nodeId, { duration }),\r\n            onDelete: deleteNode,\r\n        },\r\n        chatgpt: {\r\n            updateApiKey: (apiKey) => updateNode(nodeId, { apiKey }),\r\n            updateInstructions: (instructions) => updateNode(nodeId, { instructions }),\r\n            onDelete: deleteNode,\r\n        },\r\n        api: {\r\n            updateMethod: (method) => updateNode(nodeId, { method }),\r\n            updateUrl: (url) => updateNode(nodeId, { url }),\r\n            updateHeaders: (headers) => updateNode(nodeId, { headers }),\r\n            updateBody: (body) => updateNode(nodeId, { body }),\r\n            onDelete: deleteNode,\r\n        },\r\n        updateCRM: {\r\n            updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n            updateField: (field) => updateNode(nodeId, { field }),\r\n            updateValue: (value) => updateNode(nodeId, { value }),\r\n            onDelete: deleteNode,\r\n        },\r\n        createRecord: {\r\n            updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n            updateStage: (stage) => updateNode(nodeId, { stage }),\r\n            updateFields: (fields) => updateNode(nodeId, { fields }),\r\n            onDelete: deleteNode,\r\n        },\r\n    };\r\n\r\n    return {\r\n        id: nodeId,\r\n        type,\r\n        position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        draggable: true,\r\n        data: {\r\n            ...initialData,\r\n            ...updateFunctions[type],\r\n        },\r\n    };\r\n}, [idCounter, updateNode, deleteNode]);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}