{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marco\\\\DocsImportantes\\\\CLT\\\\Bitrix24\\\\ProjetoDragAndDrop\\\\frontend\\\\src\\\\FlowEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, Handle, useNodesState, useEdgesState, addEdge } from 'react-flow-renderer';\n\n// Estilos atualizados\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst flowContainerStyles = {\n  width: '100%',\n  height: 'calc(100vh - 60px)',\n  position: 'relative',\n  overflow: 'hidden'\n};\nconst nodeStyles = {\n  base: {\n    padding: '20px',\n    backgroundColor: '#fff',\n    borderRadius: '8px',\n    border: '2px solid #2684ff',\n    minWidth: '300px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  input: {\n    margin: '10px 0',\n    padding: '8px',\n    width: '100%',\n    borderRadius: '4px',\n    border: '1px solid #ddd'\n  },\n  section: {\n    margin: '15px 0',\n    padding: '10px',\n    backgroundColor: '#f8f9fa',\n    borderRadius: '6px',\n    width: '100%'\n  },\n  select: {\n    width: '100%',\n    padding: '8px',\n    margin: '5px 0'\n  },\n  deleteButton: {\n    background: 'red',\n    color: 'white',\n    border: 'none',\n    borderRadius: '50%',\n    width: '24px',\n    height: '24px',\n    cursor: 'pointer',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '10px'\n  }\n};\n\n// Estilo personalizado para os Handles (bolinhas de conexão)\nconst handleStyle = {\n  width: '15px',\n  height: '15px',\n  backgroundColor: '#2684ff',\n  border: '2px solid #fff',\n  borderRadius: '50%'\n};\n\n// Novo estilo para os botões da barra superior\nconst topBarButtonStyle = {\n  padding: '10px 15px',\n  fontSize: '16px',\n  backgroundColor: '#007bff',\n  color: 'white',\n  border: 'none',\n  borderRadius: '5px',\n  cursor: 'pointer',\n  margin: '5px'\n};\n\n// Componente de nó pré-configurado\nconst PreConfiguredNode = /*#__PURE__*/React.memo(_c = ({\n  id,\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeStyles.base,\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"target\",\n      position: \"left\",\n      style: handleStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\u2699\\uFE0F N\\xF3 Pr\\xE9-configurado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: nodeStyles.section,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Este n\\xF3 j\\xE1 vem com configura\\xE7\\xF5es prontas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Op\\xE7\\xE3o 1: Ativada\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Op\\xE7\\xE3o 2: Desativada\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Op\\xE7\\xE3o 3: Personaliz\\xE1vel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: nodeStyles.deleteButton,\n      onClick: () => data.onDelete(id),\n      children: \"\\uD83D\\uDDD1\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: \"right\",\n      style: handleStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n});\n\n// Defina nodeTypes fora do componente FlowEditor\n_c2 = PreConfiguredNode;\nconst nodeTypes = {\n  message: MessageNode,\n  question: QuestionNode,\n  media: MediaNode,\n  condition: ConditionNode,\n  interval: IntervalNode,\n  chatgpt: ChatGPTNode,\n  api: APINode,\n  updateCRM: UpdateCRMNode,\n  createRecord: CreateRecordNode,\n  preConfigured: PreConfiguredNode\n};\nconst FlowEditor = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [idCounter, setIdCounter] = useState(0);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const isValidConnection = useCallback(connection => {\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n\n    // Permite múltiplas conexões para perguntas e condições\n    if ((sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.type) === 'question' || (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.type) === 'condition') {\n      return true;\n    }\n\n    // Verifica se o nó de origem já tem uma conexão (para outros tipos de nós)\n    const hasExistingConnection = edges.some(edge => edge.source === connection.source);\n    return !hasExistingConnection;\n  }, [nodes, edges]);\n  const deleteNode = useCallback(nodeId => {\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n  }, [setNodes, setEdges]);\n  const updateNode = useCallback((nodeId, newData) => {\n    setNodes(prevNodes => prevNodes.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        ...newData\n      }\n    } : node));\n  }, [setNodes]);\n  const createNode = useCallback((type, initialData) => {\n    const nodeId = `${type}-${idCounter}`;\n    setIdCounter(prev => prev + 1);\n    const updateFunctions = {\n      message: {\n        updateContent: content => updateNode(nodeId, {\n          content\n        }),\n        onDelete: deleteNode\n      },\n      question: {\n        updateQuestion: question => updateNode(nodeId, {\n          question\n        }),\n        addOption: () => {\n          setNodes(prevNodes => prevNodes.map(node => {\n            var _node$data$options;\n            return node.id === nodeId ? {\n              ...node,\n              data: {\n                ...node.data,\n                options: [...(node.data.options || []), `Opção ${((_node$data$options = node.data.options) === null || _node$data$options === void 0 ? void 0 : _node$data$options.length) + 1 || 1}`]\n              }\n            } : node;\n          }));\n        },\n        updateOptions: options => updateNode(nodeId, {\n          options\n        }),\n        onDelete: deleteNode\n      },\n      media: {\n        handleFileUpload: file => updateNode(nodeId, {\n          file\n        }),\n        updateUrl: url => updateNode(nodeId, {\n          url\n        }),\n        onDelete: deleteNode\n      },\n      condition: {\n        updateConditionType: conditionType => updateNode(nodeId, {\n          conditionType\n        }),\n        updateField: field => updateNode(nodeId, {\n          field\n        }),\n        updateComparison: comparison => updateNode(nodeId, {\n          comparison\n        }),\n        onDelete: deleteNode\n      },\n      interval: {\n        updateDuration: duration => updateNode(nodeId, {\n          duration\n        }),\n        onDelete: deleteNode\n      },\n      chatgpt: {\n        updateApiKey: apiKey => updateNode(nodeId, {\n          apiKey\n        }),\n        updateInstructions: instructions => updateNode(nodeId, {\n          instructions\n        }),\n        onDelete: deleteNode\n      },\n      api: {\n        updateMethod: method => updateNode(nodeId, {\n          method\n        }),\n        updateUrl: url => updateNode(nodeId, {\n          url\n        }),\n        updateHeaders: headers => updateNode(nodeId, {\n          headers\n        }),\n        updateBody: body => updateNode(nodeId, {\n          body\n        }),\n        onDelete: deleteNode\n      },\n      updateCRM: {\n        updateEntity: entity => updateNode(nodeId, {\n          entity\n        }),\n        updateField: field => updateNode(nodeId, {\n          field\n        }),\n        updateValue: value => updateNode(nodeId, {\n          value\n        }),\n        onDelete: deleteNode\n      },\n      createRecord: {\n        updateEntity: entity => updateNode(nodeId, {\n          entity\n        }),\n        updateStage: stage => updateNode(nodeId, {\n          stage\n        }),\n        updateFields: fields => updateNode(nodeId, {\n          fields\n        }),\n        onDelete: deleteNode\n      },\n      preConfigured: {\n        onDelete: deleteNode\n      }\n    };\n    return {\n      id: nodeId,\n      type,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      draggable: true,\n      data: {\n        ...initialData,\n        ...updateFunctions[type]\n      }\n    };\n  }, [idCounter, updateNode, deleteNode, setNodes]);\n  const addNode = useCallback(type => {\n    const nodeConfig = {\n      message: {\n        content: ''\n      },\n      question: {\n        question: '',\n        options: ['Sim', 'Não']\n      },\n      media: {\n        url: '',\n        file: null\n      },\n      condition: {\n        conditionType: 'cadastro',\n        field: '',\n        comparison: ''\n      },\n      interval: {\n        duration: 300\n      },\n      chatgpt: {\n        apiKey: '',\n        instructions: ''\n      },\n      api: {\n        method: 'GET',\n        url: '',\n        headers: '',\n        body: ''\n      },\n      updateCRM: {\n        entity: 'lead',\n        field: '',\n        value: ''\n      },\n      createRecord: {\n        entity: 'lead',\n        stage: 'new',\n        fields: '{}'\n      },\n      preConfigured: {} // Nó pré-configurado não precisa de configurações iniciais\n    };\n    setNodes(prevNodes => [...prevNodes, createNode(type, nodeConfig[type])]);\n  }, [createNode, setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        backgroundColor: '#f8f9fa',\n        borderBottom: '1px solid #ddd',\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexWrap: 'wrap'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Conversa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('message'),\n            children: \"Mensagem\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('question'),\n            children: \"Pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('media'),\n            children: \"M\\xEDdia\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('condition'),\n            children: \"Condi\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('interval'),\n            children: \"Intervalo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Integra\\xE7\\xF5es\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('chatgpt'),\n            children: \"Chat GPT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('api'),\n            children: \"API Externa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Bitrix\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('updateCRM'),\n            children: \"Atualizar CRM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: topBarButtonStyle,\n            onClick: () => addNode('createRecord'),\n            children: \"Criar Cadastro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: flowContainerStyles,\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        isValidConnection: isValidConnection,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        right: '20px',\n        padding: '10px 20px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer',\n        zIndex: 1000\n      },\n      onClick: () => addNode('preConfigured'),\n      children: \"Adicionar N\\xF3 Pr\\xE9-configurado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(FlowEditor, \"whyRLpu3p1tZEk6faPA/ydCtt3M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c3 = FlowEditor;\nexport default FlowEditor;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PreConfiguredNode$React.memo\");\n$RefreshReg$(_c2, \"PreConfiguredNode\");\n$RefreshReg$(_c3, \"FlowEditor\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","MiniMap","Controls","Background","Handle","useNodesState","useEdgesState","addEdge","jsxDEV","_jsxDEV","flowContainerStyles","width","height","position","overflow","nodeStyles","base","padding","backgroundColor","borderRadius","border","minWidth","boxShadow","display","flexDirection","alignItems","input","margin","section","select","deleteButton","background","color","cursor","justifyContent","marginTop","handleStyle","topBarButtonStyle","fontSize","PreConfiguredNode","memo","_c","id","data","style","children","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDelete","_c2","nodeTypes","message","MessageNode","question","QuestionNode","media","MediaNode","condition","ConditionNode","interval","IntervalNode","chatgpt","ChatGPTNode","api","APINode","updateCRM","UpdateCRMNode","createRecord","CreateRecordNode","preConfigured","FlowEditor","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","idCounter","setIdCounter","onConnect","params","eds","isValidConnection","connection","sourceNode","find","node","source","targetNode","target","hasExistingConnection","some","edge","deleteNode","nodeId","nds","filter","updateNode","newData","prevNodes","map","createNode","initialData","prev","updateFunctions","updateContent","content","updateQuestion","addOption","_node$data$options","options","length","updateOptions","handleFileUpload","file","updateUrl","url","updateConditionType","conditionType","updateField","field","updateComparison","comparison","updateDuration","duration","updateApiKey","apiKey","updateInstructions","instructions","updateMethod","method","updateHeaders","headers","updateBody","body","updateEntity","entity","updateValue","value","updateStage","stage","updateFields","fields","x","Math","random","y","draggable","addNode","nodeConfig","borderBottom","flexWrap","fitView","bottom","right","zIndex","_c3","$RefreshReg$"],"sources":["C:/Users/marco/DocsImportantes/CLT/Bitrix24/ProjetoDragAndDrop/frontend/src/FlowEditor.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport ReactFlow, {\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    Handle,\r\n    useNodesState,\r\n    useEdgesState,\r\n    addEdge\r\n} from 'react-flow-renderer';\r\n\r\n// Estilos atualizados\r\nconst flowContainerStyles = {\r\n    width: '100%',\r\n    height: 'calc(100vh - 60px)',\r\n    position: 'relative',\r\n    overflow: 'hidden'\r\n};\r\n\r\nconst nodeStyles = {\r\n    base: {\r\n        padding: '20px',\r\n        backgroundColor: '#fff',\r\n        borderRadius: '8px',\r\n        border: '2px solid #2684ff',\r\n        minWidth: '300px',\r\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        margin: '10px 0',\r\n        padding: '8px',\r\n        width: '100%',\r\n        borderRadius: '4px',\r\n        border: '1px solid #ddd'\r\n    },\r\n    section: {\r\n        margin: '15px 0',\r\n        padding: '10px',\r\n        backgroundColor: '#f8f9fa',\r\n        borderRadius: '6px',\r\n        width: '100%'\r\n    },\r\n    select: {\r\n        width: '100%',\r\n        padding: '8px',\r\n        margin: '5px 0'\r\n    },\r\n    deleteButton: {\r\n        background: 'red',\r\n        color: 'white',\r\n        border: 'none',\r\n        borderRadius: '50%',\r\n        width: '24px',\r\n        height: '24px',\r\n        cursor: 'pointer',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '10px'\r\n    }\r\n};\r\n\r\n// Estilo personalizado para os Handles (bolinhas de conexão)\r\nconst handleStyle = {\r\n    width: '15px',\r\n    height: '15px',\r\n    backgroundColor: '#2684ff',\r\n    border: '2px solid #fff',\r\n    borderRadius: '50%'\r\n};\r\n\r\n// Novo estilo para os botões da barra superior\r\nconst topBarButtonStyle = {\r\n    padding: '10px 15px',\r\n    fontSize: '16px',\r\n    backgroundColor: '#007bff',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    margin: '5px'\r\n};\r\n\r\n// Componente de nó pré-configurado\r\nconst PreConfiguredNode = React.memo(({ id, data }) => {\r\n    return (\r\n        <div style={nodeStyles.base}>\r\n            <Handle type=\"target\" position=\"left\" style={handleStyle} />\r\n            <h4>⚙️ Nó Pré-configurado</h4>\r\n            <div style={nodeStyles.section}>\r\n                <p>Este nó já vem com configurações prontas.</p>\r\n                <ul>\r\n                    <li>Opção 1: Ativada</li>\r\n                    <li>Opção 2: Desativada</li>\r\n                    <li>Opção 3: Personalizável</li>\r\n                </ul>\r\n            </div>\r\n            <button style={nodeStyles.deleteButton} onClick={() => data.onDelete(id)}>🗑️</button>\r\n            <Handle type=\"source\" position=\"right\" style={handleStyle} />\r\n        </div>\r\n    );\r\n});\r\n\r\n// Defina nodeTypes fora do componente FlowEditor\r\nconst nodeTypes = {\r\n    message: MessageNode,\r\n    question: QuestionNode,\r\n    media: MediaNode,\r\n    condition: ConditionNode,\r\n    interval: IntervalNode,\r\n    chatgpt: ChatGPTNode,\r\n    api: APINode,\r\n    updateCRM: UpdateCRMNode,\r\n    createRecord: CreateRecordNode,\r\n    preConfigured: PreConfiguredNode\r\n};\r\n\r\nconst FlowEditor = () => {\r\n    const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n    const [idCounter, setIdCounter] = useState(0);\r\n\r\n    const onConnect = useCallback(\r\n        (params) => setEdges((eds) => addEdge(params, eds)),\r\n        [setEdges]\r\n    );\r\n\r\n    const isValidConnection = useCallback((connection) => {\r\n        const sourceNode = nodes.find((node) => node.id === connection.source);\r\n        const targetNode = nodes.find((node) => node.id === connection.target);\r\n\r\n        // Permite múltiplas conexões para perguntas e condições\r\n        if (sourceNode?.type === 'question' || sourceNode?.type === 'condition') {\r\n            return true;\r\n        }\r\n\r\n        // Verifica se o nó de origem já tem uma conexão (para outros tipos de nós)\r\n        const hasExistingConnection = edges.some(\r\n            (edge) => edge.source === connection.source\r\n        );\r\n\r\n        return !hasExistingConnection;\r\n    }, [nodes, edges]);\r\n\r\n    const deleteNode = useCallback((nodeId) => {\r\n        setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n        setEdges((eds) => eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId));\r\n    }, [setNodes, setEdges]);\r\n\r\n    const updateNode = useCallback((nodeId, newData) => {\r\n        setNodes((prevNodes) =>\r\n            prevNodes.map((node) =>\r\n                node.id === nodeId ? { ...node, data: { ...node.data, ...newData } } : node\r\n            )\r\n        );\r\n    }, [setNodes]);\r\n\r\n    const createNode = useCallback((type, initialData) => {\r\n        const nodeId = `${type}-${idCounter}`;\r\n        setIdCounter((prev) => prev + 1);\r\n\r\n        const updateFunctions = {\r\n            message: {\r\n                updateContent: (content) => updateNode(nodeId, { content }),\r\n                onDelete: deleteNode,\r\n            },\r\n            question: {\r\n                updateQuestion: (question) => updateNode(nodeId, { question }),\r\n                addOption: () => {\r\n                    setNodes((prevNodes) =>\r\n                        prevNodes.map((node) =>\r\n                            node.id === nodeId\r\n                                ? {\r\n                                    ...node,\r\n                                    data: {\r\n                                        ...node.data,\r\n                                        options: [...(node.data.options || []), `Opção ${node.data.options?.length + 1 || 1}`],\r\n                                    },\r\n                                }\r\n                                : node\r\n                        )\r\n                    );\r\n                },\r\n                updateOptions: (options) => updateNode(nodeId, { options }),\r\n                onDelete: deleteNode,\r\n            },\r\n            media: {\r\n                handleFileUpload: (file) => updateNode(nodeId, { file }),\r\n                updateUrl: (url) => updateNode(nodeId, { url }),\r\n                onDelete: deleteNode,\r\n            },\r\n            condition: {\r\n                updateConditionType: (conditionType) => updateNode(nodeId, { conditionType }),\r\n                updateField: (field) => updateNode(nodeId, { field }),\r\n                updateComparison: (comparison) => updateNode(nodeId, { comparison }),\r\n                onDelete: deleteNode,\r\n            },\r\n            interval: {\r\n                updateDuration: (duration) => updateNode(nodeId, { duration }),\r\n                onDelete: deleteNode,\r\n            },\r\n            chatgpt: {\r\n                updateApiKey: (apiKey) => updateNode(nodeId, { apiKey }),\r\n                updateInstructions: (instructions) => updateNode(nodeId, { instructions }),\r\n                onDelete: deleteNode,\r\n            },\r\n            api: {\r\n                updateMethod: (method) => updateNode(nodeId, { method }),\r\n                updateUrl: (url) => updateNode(nodeId, { url }),\r\n                updateHeaders: (headers) => updateNode(nodeId, { headers }),\r\n                updateBody: (body) => updateNode(nodeId, { body }),\r\n                onDelete: deleteNode,\r\n            },\r\n            updateCRM: {\r\n                updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n                updateField: (field) => updateNode(nodeId, { field }),\r\n                updateValue: (value) => updateNode(nodeId, { value }),\r\n                onDelete: deleteNode,\r\n            },\r\n            createRecord: {\r\n                updateEntity: (entity) => updateNode(nodeId, { entity }),\r\n                updateStage: (stage) => updateNode(nodeId, { stage }),\r\n                updateFields: (fields) => updateNode(nodeId, { fields }),\r\n                onDelete: deleteNode,\r\n            },\r\n            preConfigured: {\r\n                onDelete: deleteNode,\r\n            },\r\n        };\r\n\r\n        return {\r\n            id: nodeId,\r\n            type,\r\n            position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n            draggable: true,\r\n            data: {\r\n                ...initialData,\r\n                ...updateFunctions[type],\r\n            },\r\n        };\r\n    }, [idCounter, updateNode, deleteNode, setNodes]);\r\n\r\n    const addNode = useCallback((type) => {\r\n        const nodeConfig = {\r\n            message: { content: '' },\r\n            question: { question: '', options: ['Sim', 'Não'] },\r\n            media: { url: '', file: null },\r\n            condition: { conditionType: 'cadastro', field: '', comparison: '' },\r\n            interval: { duration: 300 },\r\n            chatgpt: { apiKey: '', instructions: '' },\r\n            api: { method: 'GET', url: '', headers: '', body: '' },\r\n            updateCRM: { entity: 'lead', field: '', value: '' },\r\n            createRecord: { entity: 'lead', stage: 'new', fields: '{}' },\r\n            preConfigured: {}, // Nó pré-configurado não precisa de configurações iniciais\r\n        };\r\n        setNodes((prevNodes) => [...prevNodes, createNode(type, nodeConfig[type])]);\r\n    }, [createNode, setNodes]);\r\n\r\n    return (\r\n        <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n            <div style={{\r\n                padding: '10px',\r\n                backgroundColor: '#f8f9fa',\r\n                borderBottom: '1px solid #ddd',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                flexWrap: 'wrap'\r\n            }}>\r\n                <div>\r\n                    <h3>Conversa</h3>\r\n                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('message')}>Mensagem</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('question')}>Pergunta</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('media')}>Mídia</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('condition')}>Condição</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('interval')}>Intervalo</button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h3>Integrações</h3>\r\n                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('chatgpt')}>Chat GPT</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('api')}>API Externa</button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <h3>Bitrix</h3>\r\n                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('updateCRM')}>Atualizar CRM</button>\r\n                        <button style={topBarButtonStyle} onClick={() => addNode('createRecord')}>Criar Cadastro</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Container para o React Flow */}\r\n            <div style={flowContainerStyles}>\r\n                <ReactFlow\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    onNodesChange={onNodesChange}\r\n                    onEdgesChange={onEdgesChange}\r\n                    onConnect={onConnect}\r\n                    isValidConnection={isValidConnection}\r\n                    nodeTypes={nodeTypes}\r\n                    fitView\r\n                >\r\n                    <MiniMap />\r\n                    <Controls />\r\n                    <Background />\r\n                </ReactFlow>\r\n            </div>\r\n            <button\r\n                style={{\r\n                    position: 'absolute',\r\n                    bottom: '20px',\r\n                    right: '20px',\r\n                    padding: '10px 20px',\r\n                    backgroundColor: '#007bff',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '5px',\r\n                    cursor: 'pointer',\r\n                    zIndex: 1000\r\n                }}\r\n                onClick={() => addNode('preConfigured')}\r\n            >\r\n                Adicionar Nó Pré-configurado\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FlowEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}